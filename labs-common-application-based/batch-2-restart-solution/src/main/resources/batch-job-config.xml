<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ /*
  ~  * Copyright 2002-2011 the original author or authors, or Red-Black IT Ltd, as appropriate.
  ~  *
  ~  * Licensed under the Apache License, Version 2.0 (the "License");
  ~  * you may not use this file except in compliance with the License.
  ~  * You may obtain a copy of the License at
  ~  *
  ~  *      http://www.apache.org/licenses/LICENSE-2.0
  ~  *
  ~  * Unless required by applicable law or agreed to in writing, software
  ~  * distributed under the License is distributed on an "AS IS" BASIS,
  ~  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  * See the License for the specific language governing permissions and
  ~  * limitations under the License.
  ~  */
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

    <import resource="classpath:/rewards/internal/common-application-config.xml" />

	<!-- TODO 01: define the diningRequestsJob -->
	<batch:job id="diningRequestsJob">
		<batch:step id="readDiningRequestsStep">
			<!-- TODO 11: add a start-limit="3" to the tasklet -->
			<batch:tasklet start-limit="3">
				<batch:chunk reader="diningRequestsReader" writer="reportWriter"
					commit-interval="10">
					<batch:processor adapter-method="rewardAccountFor">
						<ref bean="rewardNetwork" />
					</batch:processor>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- TODO 06: define the skippingDiningRequestsJob based on the diningRequestsJob 
		and configure a skip-limit of 1 in case of FlatFileParseExceptions -->
	<batch:job id="skippingDiningRequestsJob">
		<batch:step id="skippingReadDiningRequestsStep">
			<batch:tasklet>
				<batch:chunk reader="diningRequestsReader" writer="reportWriter"
					commit-interval="10" skip-limit="1">
					<batch:processor adapter-method="rewardAccountFor">
						<ref bean="rewardNetwork" />
					</batch:processor>
					<batch:skippable-exception-classes>
						<batch:include
							class="org.springframework.batch.item.file.FlatFileParseException" />
					</batch:skippable-exception-classes>
				</batch:chunk>
				<!-- TODO-09 Define a DiningSkipListener bean as a <batch:listener> inside the tasklet -->
				<batch:listeners>
					<batch:listener>
						<bean class="rewards.batch.DiningSkipListener" />
					</batch:listener>
				</batch:listeners>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<!-- TODO 02: set the resource by using a SpEL expression that takes the 
		'input.resource.path' parameter from the job parameters and give the bean 
		a step scope for late binding of this value -->
	<bean id="diningRequestsReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="strict" value="true" />
		<property name="resource" value="#{jobParameters['input.resource.path']}" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names">
							<list>
								<value>creditCardNumber</value>
								<value>merchantNumber</value>
								<value>amount</value>
								<value>date</value>
							</list>
						</property>
					</bean>
				</property>
				<!-- TODO 03: inject an instance of the new DiningFieldSetMapper in the 
					line mapper -->
				<property name="fieldSetMapper">
					<bean class="rewards.batch.DiningFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

	<bean id="reportWriter" class="rewards.batch.ReportWriter" />

</beans>
